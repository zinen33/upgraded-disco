module.exports.config = {
    name: "setmoney",
    version: "1.0.0",
    hasPermssion: 2,
    credits: "CatalizCS",
    description: "ƒêi·ªÅu ch·ªânh th√¥ng tin c·ªßa ng∆∞·ªùi d√πng",
    commandCategory: "Admin",
    usages: "[add/all/set/clean] [S·ªë ti·ªÅn] [Tag ng∆∞·ªùi d√πng/reply]",
    cooldowns: 5
};

module.exports.run = async function ({ event, api, Currencies, args,Users }) {
    const { threadID, messageID, senderID, messageReply } = event;
if (args.length == 0) return api.sendMessage(`===== [ ùó¶ùóòùóßùó†ùó¢ùó°ùóòùó¨ ] =====\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n/setmoney add + s·ªë ti·ªÅn: C·ªông ti·ªÅn cho b·∫£n th√¢n ho·∫∑c ng∆∞·ªùi ƒë∆∞·ª£c [tag/reply]\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n/setmoney uid + id + s·ªë ti·ªÅn: c·ªông th√™m s·ªë ti·ªÅn c·ªßa ng∆∞·ªùi kh√°c\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n/setmoney clean: X√≥a to√†n b·ªô s·ªë ti·ªÅn c·ªßa b·∫£n th√¢n ho·∫∑c ng∆∞·ªùi ƒë∆∞·ª£c [tag/reply]\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n/setmoney set + s·ªë ti·ªÅn: Thay ƒë·ªïi to√†n b·ªô s·ªë ti·ªÅn c·ªßa b·∫£n th√¢n ho·∫∑c ng∆∞·ªùi ƒë∆∞·ª£c [tag/reply]\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n/setmoney all + s·ªë ti·ªÅn: c·ªông ti·ªÅn cho to√†n b·ªô th√†nh vi√™n trong nh√≥m`, event.threadID, event.messageID);
    const { throwError } = global.utils;
    const { increaseMoney, decreaseMoney, getData } = Currencies;
   const mentionID = Object.keys(event.mentions);
    const money = parseInt(args[1]);
    var message = [];
    var error = [];

    switch (args[0]) {
        case "add": {
          if (event.type == "message_reply") {
            var name = (await Users.getData(event.messageReply.senderID)).name;
          await Currencies.increaseMoney(event.messageReply.senderID, money); console.log("done");
   
          return api.sendMessage(`[ ùó†ùóºùóªùó≤ùòÜ ] ‚Üí ƒê√£ c·ªông ti·ªÅn cho ${name} th√†nh c√¥ng ${money}$` ,event.threadID)  
            
          } else if (mentionID.length != 0) {
                for (singleID of mentionID) {
                if (!money || isNaN(money)) return throwError(this.config.name, threadID, messageID);
                try {
                    await Currencies.increaseMoney(singleID, money);
                    message.push(singleID);
                } catch (e) { error.push(e); console.log(e) };
                }
                return api.sendMessage(`[ ùó†ùóºùóªùó≤ùòÜ ] ‚Üí ƒê√£ c·ªông th√™m ${money}$ cho ${message.length} ng∆∞·ªùi`, threadID, function () { if (error.length != 0) return api.sendMessage(`[ L·ªói ] ‚Üí Kh√¥ng th·ªÉ th·ªÉ c·ªông th√™m ti·ªÅn cho ${error.length} ng∆∞·ªùi!`, threadID) }, messageID);
            } else {
                if (!money || isNaN(money)) return throwError(this.config.name, threadID, messageID);
                try {
                await Currencies.increaseMoney(senderID, money);
                message.push(senderID);
                } catch (e) { error.push(e) };
                return api.sendMessage(`[ ùó†ùóºùóªùó≤ùòÜ ] ‚Üí ƒê√£ c·ªông th√™m ${money}$ cho b·∫£n th√¢n`, threadID, function () { if (error.length != 0) return api.sendMessage(`[ L·ªói ] ‚Üí Kh√¥ng th·ªÉ th·ªÉ c·ªông th√™m ti·ªÅn cho b·∫£n th√¢n!`, threadID) }, messageID);
            }
        }

        case "set": {
            if (mentionID.length != 0) {
                for (singleID of mentionID) {
                if (!money || isNaN(money)) return throwError(this.config.name, threadID, messageID);
                try {
                    await Currencies.setData(singleID, { money });
                    message.push(singleID);
                } catch (e) { error.push(e) };
                }
                return api.sendMessage(`[ ùó†ùóºùóªùó≤ùòÜ ] ‚Üí ƒê√£ set th√†nh c√¥ng ${money}$ cho ${message.length} ng∆∞·ªùi`, threadID, function () { if (error.length != 0) return api.sendMessage(`[ L·ªói ] ‚Üí Kh√¥ng th·ªÉ set ti·ªÅn cho ${error.length} ng∆∞·ªùi!`, threadID) }, messageID);
            } else if (args[2]) {
                if (!money || isNaN(money)) return throwError(this.config.name, threadID, messageID);
                try {
                await Currencies.setData(args[2], { money });
                message.push(args[2]);
                } catch (e) { error.push(e) };
                return api.sendMessage(`[ ùó†ùóºùóªùó≤ùòÜ ] ‚Üí ƒê√£ set th√†nh c√¥ng ${money}$ cho ${message.length} ng∆∞·ªùi`, threadID, function () { if (error.length != 0) return api.sendMessage(`[ L·ªói ] ‚Üí Kh√¥ng th·ªÉ set ti·ªÅn cho ${error.length} ng∆∞·ªùi!`, threadID) }, messageID);
            }
            else {
                if (!money || isNaN(money)) return throwError(this.config.name, threadID, messageID);
                try {
                await Currencies.setData(senderID, { money });
                message.push(senderID);
                } catch (e) { error.push(e) };
                return api.sendMessage(`[ ùó†ùóºùóªùó≤ùòÜ ] ‚Üí ƒê√£ set th√†nh c√¥ng ${money}$ cho b·∫£n th√¢n`, threadID, function () { if (error.length != 0) return api.sendMessage(`[ L·ªói ] ‚Üí Kh√¥ng th·ªÉ set ti·ªÅn cho b·∫£n th√¢n!`, threadID) }, messageID);
            }
        }

        case "clean": {
            if (mentionID.length != 0) {
                for (singleID of mentionID) {
                try {
                    await Currencies.setData(singleID, { money: 0 });
                    message.push(singleID);
                } catch (e) { error.push(e) };
            }
                return api.sendMessage(`[ ùó†ùóºùóªùó≤ùòÜ ] ‚Üí ƒê√£ x√≥a th√†nh c√¥ng to√†n b·ªô ti·ªÅn c·ªßa ${message.length} ng∆∞·ªùi`, threadID, function () { if (error.length != 0) return api.sendMessage(`[ L·ªói ] ‚Üí Kh√¥ng th·ªÉ x√≥a to√†n b·ªô ti·ªÅn c·ªßa ${error.length}`, threadID) }, messageID)
            } else {
                try {
                await Currencies.setData(senderID, { money: 0 });
                message.push(senderID);
                } catch (e) { error.push(e) };
                return api.sendMessage(`[ ùó†ùóºùóªùó≤ùòÜ ] ‚Üí ƒê√£ x√≥a th√†nh c√¥ng ti·ªÅn c·ªßa cho b·∫£n th√¢n`, threadID, function () { if (error.length != 0) return api.sendMessage(`[ L·ªói ]  ‚Üí Kh√¥ng th·ªÉ x√≥a to√†n b·ªô ti·ªÅn c·ªßa b·∫£n th√¢n!`, threadID) }, messageID);
            }
        }
        
        case "all": {
           var name = (await Users.getData(event.senderID)).name
            if(!args[1]) return api.sendMessage("L·ªánh s·ª≠ dung: setmoney\nB·∫°n ch∆∞a nh·∫≠p s·ªë ti·ªÅn c·∫ßn set !!!", threadID, messageID);
            if(isNaN(args[1])) return api.sendMessage("Th√¥i Kh·ªèi S√†i ƒêi M√†y Ngu Vcl !!! :)", threadID, messageID);
            if(args[1] > 1000000000000) return api.sendMessage("L·ªánh s·ª≠ d·ª•ng: setmoney\nS·ªë ti·ªÅn ph·∫£i nh·ªè < 1000000000000", threadID, messageID);
            let { participantIDs } = await api.getThreadInfo(threadID);
            for(let i of participantIDs) {
                try {
                    await increaseMoney(parseInt(i), parseInt(args[1]));
                    message.push(i);
                } catch(e) { error.push(e) }
            }
            return api.sendMessage(`${name} ƒë√£ c·ªông th√™m ${args[1]}$ cho ${message.length} ng∆∞·ªùi`, threadID, function () { if (error.length != 0) return api.sendMessage(`[ ùó†ùóºùóªùó≤ùòÜ ] ‚Üí Kh√¥ng th·ªÉ c·ªông th√™m ti·ªÅn cho ${error.length} ng∆∞·ªùi!`, threadID) }, messageID);
        }

        case "uid": {
           var id = args[1];
		var cut = args[2];
		let nameeee = (await Users.getData(id)).name
		   return api.sendMessage(`[ ùó†ùóºùóªùó≤ùòÜ ] ‚Üí  ƒê√£ c·ªông th√™m ${nameeee} th√†nh ${cut}$`, event.threadID, () => Currencies.increaseMoney(id, parseInt(cut)), event.messageID)	
          }
        default: {
            return global.utils.throwError(this.config.name, threadID, messageID);
        }
    }
}